{
  "_args": [
    [
      {
        "raw": "lambda-packager",
        "scope": null,
        "escapedName": "lambda-packager",
        "name": "lambda-packager",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Work\\CMS-API"
    ]
  ],
  "_from": "lambda-packager@latest",
  "_id": "lambda-packager@0.2.1",
  "_inCache": true,
  "_location": "/lambda-packager",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "tomdale",
    "email": "tom@tomdale.net"
  },
  "_npmVersion": "2.14.8",
  "_phantomChildren": {
    "array-flatten": "1.1.1",
    "content-disposition": "0.5.2",
    "content-type": "1.0.2",
    "depd": "1.1.0",
    "destroy": "1.0.4",
    "encodeurl": "1.0.1",
    "etag": "1.8.0",
    "finalhandler": "1.0.2",
    "graceful-readlink": "1.0.1",
    "http-errors": "1.6.1",
    "iconv-lite": "0.4.15",
    "media-typer": "0.3.0",
    "mime-db": "1.27.0",
    "on-finished": "2.3.0",
    "proxy-addr": "1.1.4",
    "setprototypeof": "1.0.3",
    "statuses": "1.3.1",
    "unpipe": "1.0.0",
    "utils-merge": "1.0.0",
    "vary": "1.1.1"
  },
  "_requested": {
    "raw": "lambda-packager",
    "scope": null,
    "escapedName": "lambda-packager",
    "name": "lambda-packager",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/lambda-packager/-/lambda-packager-0.2.1.tgz",
  "_shasum": "1667c2e6672b93624e8162efbcb9c377c4af964d",
  "_shrinkwrap": null,
  "_spec": "lambda-packager",
  "_where": "D:\\Work\\CMS-API",
  "author": {
    "name": "Tom Dale",
    "email": "tom@tomdale.net"
  },
  "bin": {
    "lambda-packager": "bin/lambda-packager"
  },
  "bugs": {
    "url": "https://github.com/tomdale/lambda-packager/issues"
  },
  "dependencies": {
    "archiver": "^0.16.0",
    "aws-sdk": "^2.2.13",
    "body-parser": "^1.14.1",
    "chalk": "^1.1.1",
    "commander": "^2.9.0",
    "debug": "^2.2.0",
    "express": "^4.13.3",
    "fs-extra": "^0.24.0",
    "fs-promise": "^0.3.1",
    "inquirer": "^0.11.0",
    "lodash.merge": "^3.3.2",
    "request-promise": "^1.0.2",
    "rsvp": "^3.1.0",
    "temp": "^0.8.3",
    "user-home": "^2.0.0",
    "uuid": "^2.0.1"
  },
  "description": "Builds dependencies for Node.js AWS Lambda functions",
  "devDependencies": {
    "adm-zip": "^0.4.7",
    "chai": "^3.4.0",
    "chai-as-promised": "^5.1.0",
    "mocha": "^2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "1667c2e6672b93624e8162efbcb9c377c4af964d",
    "tarball": "https://registry.npmjs.org/lambda-packager/-/lambda-packager-0.2.1.tgz"
  },
  "gitHead": "83f1352d00ac50c5b26b668ba250c04130eaceca",
  "homepage": "https://github.com/tomdale/lambda-packager#readme",
  "keywords": [
    "aws",
    "lambda"
  ],
  "license": "MIT",
  "main": "lib/packager.js",
  "maintainers": [
    {
      "name": "tomdale",
      "email": "tom@tomdale.net"
    }
  ],
  "name": "lambda-packager",
  "optionalDependencies": {},
  "readme": "## Lambda Packager\n\nLambda Packager builds your project's npm packages for use on AWS\nLambda using AWS Lambda.\n\n### Motivation\n\nAWS Lambda runs Node.js apps, but you have to provide the `node_modules`\ndirectory yourself. Building it on your local machine won't work if your\ndependencies contain native code that needs to be compiled. Amazon\nsuggests running an EC2 instance, compiling the dependencies there\nmanually, then copying them back to your machine over SSH.\n\nLambda Packager makes deploying Node.js code to AWS Lambda easy, by\nusing Lambda itself to compile your dependencies.\n\nJust provide Lambda Packager with a directory containing your Lambda\nfunction (it must contains a `package.json` file with a list of\ndependencies), and it will build a zip file of that directory with a\nLambda-compatible `node_modules` directory that's ready to deploy.\n\n### Usage\n\n**Note**: You must deploy the Lambda builder before these commands will\nwork. See [Deployment](#deployment).\n\n#### Command Line\n\n```sh\nlambda-packager package my-package output.zip\n```\n\n#### Programmatic\n\n```js\nvar lambdaPackager = require('lambda-packager');\n\nlambdaPackager.build({\n  from: 'my-package',\n  to: 'output.zip'\n});\n```\n\nAssuming `my-package` is a path to a directory with a `package.json`\nfile, its dependencies will be compiled via Lambda, then the package\nplus the dependencies will be placed into `my-package-function.zip`.\n\n## Deployment\n\nTo build dependencies, Lambda Packager uploads your `package.json` to a\nLambda function that builds your dependencies in the AWS environment.\n\nTo deploy this builder function to AWS, run the `lambda-packager deploy`\ncommand, which will prompt you for the name to use for the\nCloudFormation stack, as well as what region to create it in.  It will\nautomatically use the same credentials as the AWS CLI.\n\nThis command builds a CloudFormation stack that provisions\neverything needed to build dependencies for Lambda Packager:\n\n* IAM Role\n* Lambda Function\n* S3 Bucket\n\nMake sure that the AWS account you have authorized via the AWS CLI has\npermission to create each of these resources.\n\n### Example\n\nImagine I have a Node.js Lambda function that I want to deploy. It's\nfile structure looks like this:\n\n```\nsimple-package\n├── index.js\n└── package.json\n```\n\nYour `package.json` contains a list of dependencies, like this:\n\n```js\n{\n  \"dependencies\": {\n    \"contextify\": \"0.1.14\"\n  }\n}\n```\n\n`contextify` contains native code, so if I run `npm install` on my\ncomputer and upload my project to Lambda, it won't work. Instead, I'll\nuse `lambda-packager` to build it:\n\n```sh\nlambda-packager package simple-package simple-package-lambda.zip\n```\n\nAfter a few seconds to a few minutes (depending on the number of\ndependencies), the `package` command will produce the\n`simple-package-lambda.zip` file in my current directory. That zip file,\nif expanded, would look like this:\n\n```\nsimple-package\n├── index.js\n└── package.json\n└── node_modules\n    └── contextify\n```\n\nBecause the zip file is just your package with a Lambda-compatible\n`node_modules` directory, it's ready to upload to your Lambda function,\neither via the AWS CLI, the AWS console, or via another tool.\n\n## How It Works\n\n![diagram of lambda packager architecture](assets/diagram.png)\n\nnpm packages written in pure JavaScript run fine on Lambda, but many\npackages contain native code (written in C or C++) that must be\ncompiled. If you build those dependencies on your local machine, they're\nunlikely to work on the custom version of Amazon Linux that powers AWS\nLambda.\n\nLambda Packager works by invoking a Lambda function running on AWS and\nuploading your project's `package.json` to it. It copies that\n`package.json` to a temporary directory, then runs `npm install` to\ncompile the dependencies in the Lambda environments\n\nOnce compilation is complete, it uploads the Lambda-compatible\ndependencies to S3. Those dependencies are then downloaded back to your\nlocal machine.\n\nTo facilitate deployment, Lambda Packager will create a copy of your\nNode package, copy in the Lambda-built `node_modules` directory, and\ncreate a zip file that is ready to deploy via the AWS console or CLI\nutility.\n\n## Thanks\n\nLambda Packager was inspired by the [Thaumaturgy][thaumaturgy] project.\nI wanted to make something more automated that used my projects'\n`package.json`, rather than specifying dependencies manually. I also\nwanted something that bundled everything into a ready-to-deploy zip.\n\nWork on this project is generously sponsored by [Bustle Labs][bustle-labs].\n\n[thaumaturgy]: https://github.com/node-hocus-pocus/thaumaturgy\n[bustle-labs]: http://www.bustle.com/labs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tomdale/lambda-packager.git"
  },
  "scripts": {
    "start": "node server.js",
    "test": "mocha test/**/*-test.js"
  },
  "version": "0.2.1"
}
